
services:

  api:
    build: .
    container_name: api
    working_dir: /app/api
    command: python -u main.py
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - KAFKA_BROKER_URL=kafka:9092
      - TOPIC_OUT_NAME=btg.raw
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./app:/app

  interpreter:
    build: .
    container_name: interpreter
    working_dir: /app/interpreter
    command: python -u main.py
    environment:
      - INPUT_TOPIC=btg.parsed
      - OUTPUT_TOPIC=btg.interpreted
      - KAFKA_BOOTSTRAP=kafka:9092
      - GROUP_ID=btg-interpreter-simple
      - OLLAMA_BASE_URL=https://ollama.pedro-porto.com
      - OLLAMA_MODEL=qwen2.5:7b-instruct
      - LLM_PROVIDER=ollama
      - LLM_TEMPERATURE=0.0
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./app:/app

  textract:
    build: .
    container_name: textract
    working_dir: /app/textract
    command: python -u main.py
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_GROUP_ID=textract-group-1
      - INPUT_TOPIC=btg.raw
      - OUTPUT_TOPIC=btg.parsed
      - AWS_PROFILE=default
      - AWS_REGION=us-east-1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./app:/app
      - ~/.aws:/root/.aws:ro

  enrich:
    build: .
    container_name: enrich
    working_dir: /app/enrich
    command: python -u main.py
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - INPUT_TOPIC=btg.verified
      - OUTPUT_TOPIC=btg.enriched
      - GROUP_ID=btg-enrich-worker-group
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=postgres
      - PGUSER=postgres
      - PGPASSWORD=postgres

    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    volumes:
      - ./app:/app

  composer:
    build: .
    container_name: composer
    working_dir: /app/composer
    command: python -u main.py
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - INPUT_TOPIC=btg.matched
      - OUTPUT_TOPIC=btg.composed
      - GROUP_ID=btg-composer
      - LLM_PROVIDER=ollama
      - LLM_MODEL=qwen2.5:7b-instruct
      - LLM_TEMPERATURE=0.3
      - OLLAMA_BASE_URL=https://ollama.pedro-porto.com
    depends_on:
      - kafka
    restart: unless-stopped
    volumes:
      - ./app:/app

  verify:
    build: .
    container_name: verify
    working_dir: /app/verify
    command: python -u worker_manager.py
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - INPUT_TOPIC=btg.interpreted
      - GROUP_ID=btg-verify-worker-group
      - WORKER_COUNT=1
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=postgres
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - POST_URL=https://webhook.pedro-porto.com/api/processar
      - LLM_PROVIDER=ollama
      - LLM_MODEL=qwen2.5:7b-instruct
      - LLM_TEMPERATURE=0.3
      - OLLAMA_BASE_URL=https://ollama.pedro-porto.com
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    volumes:
      - ./app:/app

  matcher:
    build: .
    container_name: matcher
    working_dir: /app/matcher
    command: python -u main.py
    environment:
      - KAFKA_BROKER_URL=kafka:9092
      - INPUT_TOPIC=btg.enriched
      - GROUP_ID=btg-match-worker-group
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=postgres
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - LLM_PROVIDER=ollama
      - LLM_MODEL=qwen2.5:7b-instruct
      - LLM_TEMPERATURE=0.3
      - OLLAMA_BASE_URL=https://ollama.pedro-porto.com

    depends_on:
      - kafka
      - postgres
    restart: unless-stopped
    volumes:
      - ./app:/app



  postgres:
    image: postgres:16
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

  kafka:
    image: apache/kafka:4.0.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:29092,CONTROLLER://:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LOG_DIRS=/var/lib/kafka/data
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_NUM_PARTITIONS=3
      - CLUSTER_ID=ZtRxtu_KQZKhgqQf3l4GxA
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    healthcheck:
      test:
        ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 5s
      timeout: 4s
      retries: 20
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    ports:
      - "60120:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy

  kafka-init:
    image: apache/kafka:4.0.1
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh","-lc"]
    command: >
      "
      echo 'aguardando broker...';
      for i in $(seq 1 30); do
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list >/dev/null 2>&1 && break;
        sleep 2;
      done;
      echo 'criando tópicos se não existirem...';
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.raw  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.parsed  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.interpreted  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.verified  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.enriched  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.matched  --partitions 1 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic btg.composed --partitions 1 --replication-factor 1;
      echo 'tópicos prontos.';
      "
    restart: "no"

volumes:
  kafka_data:
